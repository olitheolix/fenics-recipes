# Builds a Docker image from source using as many
# upstream Ubuntu packages as possible.
# An official build of this Dockerfile is maintained at:
# https://registry.hub.docker.com/u/fenicsproject/stable-src/
# Author:
# Jack S. Hale <jack.hale@uni.lu>

# >> docker build -t fenics_base -f Dockerfile_py27_base .

# Add a command to automatically replace all occurrences of the non-utf8 names.
FROM continuumio/anaconda:latest
MAINTAINER fenics-project <fenics@fenicsproject.org>

ENV HOME /root

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

CMD ["/sbin/my_init"]

RUN apt-get update
RUN conda update -y conda

# Compiler ecosystem.
RUN apt-get install -y \
    build-essential \
    git \
    pkg-config \
    wget

# Additional dependencies.
RUN apt-get install -y nano petsc-dev

# RUN conda install -y conda-build

# RUN conda create -n fenics27 python=2.7 numpy=1.9
# RUN conda create -n fenics34 python=3.4 numpy=1.9
# RUN conda install -n fenics27 -y \
#     cmake \
#     jinja2 \
#     numpy \
#     ply \
#     six \
#     sympy

# RUN conda install -n fenics34 -y \
#     cmake \
#     jinja2 \
#     numpy \
#     ply \
#     six \
#     sympy

# Clone the relevant repos from the Fenics project.
RUN cd /tmp && \
    git clone https://github.com/FEniCS/ffc.git && \
    git clone https://github.com/FEniCS/fiat.git && \
    git clone https://github.com/FEniCS/instant.git && \
    git clone https://github.com/FEniCS/ufl.git && \
    git clone https://github.com/FEniCS/dolfin.git

# Replace problematic Unicode characters from various author names
# in the source files. This will prevent tracebacks with Python3.
RUN cd /tmp && \
    grep -rli 'Alnæs' * | xargs -i@ sed -i 's/Alnæs/Alnaes/g' @ && \
    grep -rli 'Vikstrøm' * | xargs -i@ sed -i 's/Vikstrøm/Vikstrom/g' @


RUN conda install -y conda-build
ADD . /tmp/fenics-recipes

RUN cd /tmp/fenics-recipes && conda build eigen3 swig --python 2.7 --python 3.4 --no-test

# RUN conda install -y -n fenics27 mpich2=1.4.1p1 mpi4py=1.3.1 numpy=1.9.2 numexpr=2.3.1 scipy=0.16.0 scikit-learn=0.15.2
# RUN conda install -y -n fenics34 mpich2=1.4.1p1 mpi4py=1.3.1 numpy=1.9.2 numexpr=2.3.1 scipy=0.16.0 scikit-learn=0.15.2

# # Download and install Eigen v3.2.5 library.
# # RUN cd /tmp && \
# #     mkdir -p eigen/build && \
# #     wget -O eigen.tar.bz2 http://bitbucket.org/eigen/eigen/get/3.2.5.tar.bz2 && \
# #     tar -C eigen --strip-components=1 -xvjf eigen.tar.bz2 &&\
# #     cd eigen/build && \
# #     cmake .. && \
# #     make install

# ADD . /tmp/fenics-recipes

# RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build swig"
# RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build eigen3"
# RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build instant"
# RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build ufl"
# RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build fiat"
# RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build ffc"
# #RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build dolfin"
# #RUN bash -c "source activate fenics27 && cd /tmp/fenics-recipes && conda build fenics"

# RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build swig"
# #RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build eigen3"
# RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build instant"
# RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build ufl"
# RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build fiat"
# RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build ffc"
# #RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build dolfin"
# #RUN bash -c "source activate fenics34 && cd /tmp/fenics-recipes && conda build fenics"

# Cleanup to save space
#RUN apt-get clean && \ 
#    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set the HOME environment variable, otherwise import dolfin crashes
# RUN echo "/root" > /etc/container_environment/HOME

# # Enable X11 forwarding for plotting
# RUN echo "X11Forwarding yes" >> /etc/ssh/sshd_config

# # Set LIBGL_ALWAYS_INDIRECT to suppress libGL warning message.
# RUN echo "y" > /etc/container_environment/LIBGL_ALWAYS_INDIRECT

# # Put environment variables into
# RUN echo "source /usr/local/share/dolfin/dolfin.conf" >> /etc/bash.bashrc
